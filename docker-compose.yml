version: '3.8'

services:
  # ==================== INFRASTRUCTURE ====================
  
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: fixitnow-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - fixitnow-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: fixitnow-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: fixitnow
      POSTGRES_PASSWORD: fixitnow123
      POSTGRES_DB: fixitnow_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fixitnow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fixitnow"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fixitnow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fixitnow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== BACKEND SERVICES ====================

  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: fixitnow-api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CATALOG_SERVICE_URL=http://catalog-service:8002
      - BOOKING_SERVICE_URL=http://booking-service:8003
      - ADMIN_SERVICE_URL=http://admin-service:8005
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - rabbitmq
    networks:
      - fixitnow-network
    restart: unless-stopped

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: fixitnow-auth-service
    ports:
      - "8001:8001"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql+asyncpg://fixitnow:fixitnow123@postgres:5432/fixitnow_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION=3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fixitnow-network
    restart: unless-stopped

  catalog-service:
    build:
      context: ./backend/catalog-service
      dockerfile: Dockerfile
    container_name: fixitnow-catalog-service
    ports:
      - "8002:8002"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql+asyncpg://fixitnow:fixitnow123@postgres:5432/fixitnow_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fixitnow-network
    restart: unless-stopped

  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: fixitnow-booking-service
    ports:
      - "8003:8003"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql+asyncpg://fixitnow:fixitnow123@postgres:5432/fixitnow_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fixitnow-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: fixitnow-notification-service
    ports:
      - "8004:8004"
    environment:
      - ENV=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fixitnow-network
    restart: unless-stopped

  admin-service:
    build:
      context: ./backend/admin-service
      dockerfile: Dockerfile
    container_name: fixitnow-admin-service
    ports:
      - "8005:8005"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql+asyncpg://fixitnow:fixitnow123@postgres:5432/fixitnow_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fixitnow-network
    restart: unless-stopped

  # ==================== FRONTEND ====================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fixitnow-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8003
    depends_on:
      - api-gateway
    networks:
      - fixitnow-network
    restart: unless-stopped

  # ==================== MONITORING ====================

  prometheus:
    image: prom/prometheus:latest
    container_name: fixitnow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - fixitnow-network

  grafana:
    image: grafana/grafana:latest
    container_name: fixitnow-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - fixitnow-network

networks:
  fixitnow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
